#! /usr/bin/env python

import os
import sys
import argparse
import unittest

from dsatest.bench import bench
from dsatest import settings

def recurseIterSuite(suite, match, pattern):
    for s in suite:
        if isinstance(s, unittest.TestCase):
            if pattern in s._testMethodName:
                match.addTest(s)
        else:
            recurseIterSuite(s, match, pattern)

def __createTestSuite(test_dir, test):
    """
    Create a test suite. The parameter will be tested in the following order
    and the matching tests will be loaded:
      - "all", all tests found under the test/ directory will be loaded.
      - a filename under test/. Every test in that file will be loaded.
      - a string. Test methodes containing that string will be loaded.
    """
    loader = unittest.TestLoader()

    # right-strip whitespaces and slashes, so that start_dir
    # and top_level_dir returns the same thing if /foo/bar/ or
    # /foo/bar is passed to this function
    stripped_test_dir = test_dir.rstrip(" /")
    start_dir = stripped_test_dir
    top_level_dir = os.path.dirname(stripped_test_dir)

    if len(start_dir) == 0 or len(top_level_dir) == 0:
        raise ValueError("Invalid test directory '{}'. Aborting.".format(test_dir))

    if test == 'all':
        return loader.discover(start_dir=start_dir, top_level_dir=top_level_dir, pattern="*.py")

    # load test matching the filename, and let's see how many it gets
    if test.endswith(".py"):
        suite = loader.discover(start_dir=start_dir,
                                top_level_dir=top_level_dir, pattern=test)
        if suite.countTestCases() != 0:
            return suite

    # load every tests we can find and do some matching based on that
    suite = loader.discover(start_dir=start_dir, top_level_dir=top_level_dir, pattern="*.py")
    matching_suite = unittest.TestSuite()
    recurseIterSuite(suite, matching_suite, test)

    return matching_suite


def createTestSuite(test_dir, test):
    try:
        return __createTestSuite(test_dir, test)
    except Exception:
        print("ERR: Unable to load test directory '{}'. Aborting.".format(test_dir))
        print("ERR: Make sure it's an importable python package (contains __init__.py)")
        sys.exit(1)


def main(bench_conf, test_dir, test_name, dry_run):
    bench.setup(bench_conf)
    incomplete_links = bench.incomplete_links

    for l in incomplete_links:
        print("Link {} is not connected to both ends".format(l))

    suite = createTestSuite(test_dir, test_name)
    runner = unittest.TextTestRunner(stream=sys.stdout)

    print("-"*70)

    bench.connect(dry_run)
    runner.run(suite)
    bench.disconnect(dry_run)


if __name__ == "__main__":
    script_path = os.path.dirname(os.path.abspath(__file__))
    test_dir = os.path.join(script_path, "..", "tests")
    test_dir = os.path.realpath(test_dir)

    parser = argparse.ArgumentParser(description='Control a DSA test bench')
    parser.add_argument('-t', '--test', default='all',
                        help='select tests to be executed (default: \"all\")')
    parser.add_argument('--test-dir', default=test_dir,
                        help="test folder, default to dsatest's test folder")
    parser.add_argument('-B', '--bench', default="bench.cfg",
                        help="bench configuration file")
    parser.add_argument('-C', '--conf-dir', default=None,
                        help='path to the configuration directory')
    parser.add_argument('--dry-run', action='store_true', default=False,
                        help='Skip connection to the test bench (no SSHing is done)')
    args = parser.parse_args()

    if args.conf_dir is not None:
        path = os.path.join(os.getcwd(), args.conf_dir)
        settings.set(settings.CONF_PATH, os.path.realpath(path))

    bench_cfg = os.path.join(os.getcwd(), args.bench)

    main(bench_cfg, args.test_dir, args.test, args.dry_run)
