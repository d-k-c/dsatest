#! /usr/bin/env python

import os
import sys
import argparse
import logging
import unittest

from dsatest.bench import bench
from dsatest import settings

logger = logging.getLogger('dsatest')

def setupLogger(verbosity):
    level = 0
    if verbosity == 0:
        level = logging.WARN
    elif verbosity == 1:
        level = logging.INFO
    else:
        level = logging.DEBUG

    logger.setLevel(level)

    formatter = logging.Formatter('%(levelname)s: %(message)s')

    ch = logging.StreamHandler(stream=sys.stderr)
    ch.setFormatter(formatter)

    logger.addHandler(ch)

def prettyPrintTestSuite(suite):
    for t in suite:
        if isinstance(t, unittest.TestCase):
            print(t)
        else:
            prettyPrintTestSuite(t)

def recurseIterSuite(suite, match, patterns):
    for s in suite:
        if isinstance(s, unittest.TestCase):
            if any(s._testMethodName.startswith(p) for p in patterns):
                match.addTest(s)
        else:
            recurseIterSuite(s, match, patterns)

def __createTestSuite(test_dir, tests):
    """
    Create a test suite that contains only tests who have names starting with
    test_TEST, TEST being any element in the list "tests".
    """
    loader = unittest.TestLoader()

    # right-strip whitespaces and slashes, so that start_dir
    # and top_level_dir returns the same thing if /foo/bar/ or
    # /foo/bar is passed to this function
    stripped_test_dir = test_dir.rstrip(" /")
    start_dir = stripped_test_dir
    top_level_dir = os.path.dirname(stripped_test_dir)

    if len(start_dir) == 0 or len(top_level_dir) == 0:
        raise ValueError("Invalid test directory '{}'. Aborting.".format(test_dir))

    if len(tests) == 0:
        return loader.discover(start_dir=start_dir, top_level_dir=top_level_dir, pattern="*.py")

    # load every tests we can find and do some matching based on that
    suite = loader.discover(start_dir=start_dir, top_level_dir=top_level_dir, pattern="*.py")
    matching_suite = unittest.TestSuite()
    patterns = [ "test_{}".format(t) for t in tests ]
    recurseIterSuite(suite, matching_suite, patterns)

    return matching_suite


def createTestSuite(test_dir, test):
    try:
        return __createTestSuite(test_dir, test)
    except Exception:
        print("ERR: Unable to load test directory '{}'. Aborting.".format(test_dir))
        print("ERR: Make sure it's an importable python package (contains __init__.py)")
        sys.exit(1)


def main(bench_conf, test_dir, test_name, list_tests, dry_run):
    bench.setup(bench_conf)
    incomplete_links = bench.incomplete_links

    for l in incomplete_links:
        logger.warn("Link {} is not connected to both ends".format(l))

    logger.info("Creating test suite. Searching for '{}' in '{}'".format(
                    test_name, test_dir))
    suite = createTestSuite(test_dir, test_name)
    logger.info("Found {} tests".format(suite.countTestCases()))

    if list_tests:
        if suite.countTestCases() == 0:
            print("No tests found")
        else:
            prettyPrintTestSuite(suite)
        sys.exit(0)

    runner = unittest.TextTestRunner(stream=sys.stdout)

    print("-"*70)

    bench.connect(dry_run)
    result = runner.run(suite)
    bench.disconnect(dry_run)

    # cumulate tests which raised unexpected exceptions
    # and tests that hadfailed assert methods
    tests_failed = len(result.errors) + len(result.failures)

    sys.exit(tests_failed)


if __name__ == "__main__":
    script_path = os.path.dirname(os.path.abspath(__file__))
    test_dir = os.path.join(script_path, "..", "tests")
    test_dir = os.path.realpath(test_dir)

    parser = argparse.ArgumentParser(description='Control a DSA test bench')
    parser.add_argument('-t', '--test', action='append', default=list(),
                        help="pick only tests whose names start with test_TEST, \
                                this option might be passed several times")
    parser.add_argument('-l', '--list', action='store_true',
                        help="list tests instead of executing them")
    parser.add_argument('--test-dir', default=test_dir,
                        help="test folder, default to dsatest's test folder")
    parser.add_argument('-B', '--bench', default="bench.cfg",
                        help="bench configuration file")
    parser.add_argument('-C', '--conf-dir', default=None,
                        help='path to the configuration directory')
    parser.add_argument('--dry-run', action='store_true', default=False,
                        help='Skip connection to the test bench (no SSHing is done)')
    parser.add_argument('--verbose', '-v', action='count')
    args = parser.parse_args()

    verbosity = args.verbose or 0
    setupLogger(verbosity)

    if args.conf_dir is not None:
        path = os.path.join(os.getcwd(), args.conf_dir)
        settings.set_option(settings.CONF_PATH, os.path.realpath(path))

    bench_cfg = os.path.join(os.getcwd(), args.bench)

    main(bench_cfg, args.test_dir, args.test, args.list, args.dry_run)
